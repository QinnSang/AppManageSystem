<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!--配置ShiroFilter，id 必须和 web.xml 文件中配置的DelegatingFilterProxy 的 <filter-name>一致,否则会抛出NoSuchBean异常-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<!--没有被认证时跳转到的页面；如果不配置loginUrl，默认为 /login.jsp-->
		<property name="loginUrl" value="/dev/toLogin"/>
		<!--认证成功后跳转的页面-->
		<property name="successUrl" value="/dev/index"/>
		<!--访问不被授权的页面 后跳转的页面-->
		<property name="unauthorizedUrl" value="/unauthorized.jsp"/>

		<!--<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>-->

		<!--
            配置那些页面需要收保护,以及访问这些页面需要的权限
            1. anon 可以被匿名访问
            2. authc 必须认证(即登陆)后才可以访问
            3.logout 登出
            4.roles 角色过滤器
        -->
		<property name="filterChainDefinitions">
			<value>
                <!--静态资源-->
                /static/** =anon
                /jsp/js/** =anon
                <!--验证码-->
				/dev/captcha/** = anon
                <!--登录注册-->
                /dev/toLogin = anon
                /dev/login = anon
                /dev/toRegister = anon
                /dev/register = anon
                <!--logout默认退出后跳转到根路径下，也可自定LogoutFilter来指定跳转路径-->
				/logout = logout
				<!--/user.jsp = roles[user]-->
				<!--/admin.jsp = roles[admin]-->
                /dev/index= user
				/** = anon
			</value>
		</property>
	</bean>

	<!--&lt;!&ndash;配置一个bean,该bean 实际上是一个Map, 通过实例工厂方法的方式&ndash;&gt;-->
	<!--<bean id="filterChainDefinitionMap"-->
	<!--factory-bean="filterChainDefinitionMapBuilder" factory-method="builFilterChainDefinitionMap"></bean>-->
	<!--<bean id="filterChainDefinitionMapBuilder" class="com.wonders.factory.filterChainDefinitionMapBuilder"></bean>-->

	<!--自定LogoutFilter来指定跳转路径-->
    <!--<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">-->
		<!--<property name="redirectUrl" value="/dev/toLogin"/>-->
    <!--</bean>-->
	<!--改变登录时表单的用户名和密码名，默认为username，password-->
	<!--<bean id="authc" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">-->
		<!--<property name="usernameParam" value=""/>-->
		<!--<property name="passwordParam" value=""/>-->
	<!--</bean>-->
	<!--2. 配置 SecurityManager -->
	<bean id ="securityManager" class ="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--设置缓存-->
		<property name="cacheManager" ref="cacheManager"/>
		<property name="sessionManager" ref="sessionManager"/>
		<property name ="authenticator" ref ="authenticator"/>
		<!--因为授权也需要realm，所以需要将认证器中的realm调到这里，实际上也会注入到认证器中-->
		<property name="realms">
			<list>
				<ref bean="jdbcRealm"/>
				<!--<ref bean="secondRealm"/>-->
			</list>
		</property>
		<!--设置cookie存活时间（秒）,即记住我  可以持续多长时间-->
		<!--<property name="rememberMeManager" ref="rememberMeManager"/>-->
	</bean>

	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="cookie"/>
	</bean>

    <!--一旦设置cookie记住我，登录用户类及其引用类必须实现序列化接口！-->
	<bean id="cookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- cookie 名称 -->
		<property name="name" value="rememberMe"/>
		<!-- cookie 过期时间 3天过期-->
		<property name="maxAge" value="259200"/>
	</bean>

	<!--配置CacheManager 缓存，shiro默认集成encache的jar包，里面有encache的配置文件
	   也可自定义encache配置文件，放在resources中，在这加入ehcache配置文件即可
    -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
	</bean>

    <!--配置会话管理器-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--单位是毫秒-->
        <property name="globalSessionTimeout" value="1200000"/>
        <!--删除无效会话-->
        <property name="deleteInvalidSessions" value="true"/>
    </bean>
	<!--认证器-->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<!--多个realm，调到securityManager中，因为授权也需要-->
		<!--<property name="realms">-->
			<!--<list>-->
				<!--<ref bean="jdbcRealm"/>-->
				<!--<ref bean="secondRealm"/>-->
			<!--</list>-->
		<!--</property>-->
		<!--认证策略 AuthenticationStrategy接口的默认实现-->
		<property name="authenticationStrategy">
			<!--只有一个 Realm 验证成功即可,且返回第一个 Realm 身份验证成功的认证信息,其它的忽略-->
			<!--<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"/>-->
			<!--（默认）只有一个 Realm 验证成功即可,和FirstSuccessfulStrategy不同,将返回Realm 身份认证成功的所有认证信息-->
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
			<!--所有Realm 验证成功才算成功,且返回所有Realm 身份验证成功的认证信息,如果有一个失败则失败-->
			<!--<bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/>-->
		</property>

	</bean>

	<!--
        3.配置 Realm
        3.1 secure.shiro.realm.ShiroRealm"直接实现了Realm接口的bean
    -->
	<bean id="jdbcRealm" class="secure.shiro.realm.JdbcRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!--配置加密方法-->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!--加密次数-->
				<property name="hashIterations" value="5"></property>
			</bean>
		</property>
	</bean>
	<!--<bean id="secondRealm" class="secure.shiro.realm.SecondRealm">-->
		<!--<property name="credentialsMatcher">-->
			<!--<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
				<!--<property name="hashAlgorithmName" value="SHA1"></property>-->
				<!--<property name="hashIterations" value="1024"></property>-->
			<!--</bean>-->
		<!--</property>-->
	<!--</bean>-->

	<!--
        4.配置LifecycleBeanPostProcessor 可以自定的来调用配置在Spring IOC容器中 shiro bean 的生命周期方法
    -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!--
        5.启用 IOC 容器中使用shiro 的注解,但必须在配置了lifecycleBeanPostProcessor之后才可以使用
    -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		  depends-on="lifecycleBeanPostProcessor"/>

	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

</beans>